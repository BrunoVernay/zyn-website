<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>






  
  
  
  
  
  
  <meta content="text/html; charset=ISO-8859-1" http-equiv="content-type">






  
  
  
  
  
  
  <title>PADsynth algorithm</title>
</head>


<body>
<h1>PADsynth algorithm</h1>
<h2>by <a href="http://www.paulnasca.com">Nasca Octavian Paul</a></h2>





1) <a href="#introduction">Introduction</a><br>






2) <a href="#Sound_examples">Sound examples of instruments that use this algorithm (using ZynAddSubFX)</a><br>






3) <a href="#Description">Description of the algorithm</a><br>






&nbsp;&nbsp;&nbsp; 3.1) <a href="#General_description">General descripton</a> (diagrams,etc..)<br>






&nbsp;&nbsp;&nbsp; 3.2) <a href="#pseudocode">Steps of the algorithm (with pseudocode)</a><br>






&nbsp;&nbsp;&nbsp; 3.3) <a href="#c_implementation">Public domain C/C++ code</a> that shows some simple implementations<br>






&nbsp;&nbsp;&nbsp; 3.4) <a href="#cpp_implementation">Public domain C++ class</a> that implements the algorithm (ready to use)<br>






4) <a href="#Tips">Tips and suggestions</a><br>






5) <a href="#pseudocode">Conclusions</a><br>






<br>






<h5><a name="introduction"></a><big><big><big>1) Introduction</big></big></big></h5>






<div style="text-align: justify;">&nbsp;&nbsp;&nbsp; This algorithm
generates very beautiful sounds, even if its idea is much simpler than
other algorithms. It generates a perfectly looped wavetable sample which
can be used in instruments. It easily generates sounds of ensembles,
choirs, metalic sounds (bells) and many other types of sound.<br>






&nbsp;&nbsp;&nbsp; I want to make this algorithm known and you are
welcome to learn and use this algorithm into your projects or products
(non-commercial or commercial). You will not be dissapoined by this
algorithm. This page includes some public domain C/C++ sources that can
be used in your projects/products.<br>






&nbsp;&nbsp;&nbsp; This algorithm is implemented in <a href="http://zynaddsubfx.sourceforge.net/">ZynAddSubFX</a> in the
PADsynth module and you can download it to hear yourself how beautiful
sounds it can generate. Before reading this document, I recomand to listen
to all sound examples in the next category. It will give you an idea of what
kind of sounds it produces.<br>






</div>






<br>






<h4><a name="Sound_examples"></a><big><big>2) Sound examples of instruments that use this algorithm&nbsp;</big></big></h4>






&nbsp;&nbsp;&nbsp; These sound examples are generated by ZynAddSubFX.
<span style="font-weight: bold;">All instruments's wavetables are generated by this algorithm.</span> <br>






These examples are grouped into 2 categories: <br>






&nbsp;&nbsp;&nbsp; 2.1) With FX. In this category, some effects are
used. This effects can be reverberation, phaser, etc. Mostly, the only
effect was the reverberation.<br>





<ul style="margin-left: 40px;">





  <li><a href="demos/0km.ogg">Bells, Strings and Choir</a> <span style="font-style: italic;">(you must listen this one)</span></li>





  <li><a href="demos/synth_piano.ogg">Synth Piano</a></li>





  <li><a href="demos/piano_saw_choir.ogg">Saw Synth Piano and Choir</a></li>





  <li><a href="demos/phased_choir.ogg">Phased Choir</a></li>





</ul>





&nbsp;&nbsp;&nbsp; 2.2) Without FX. All instruments in this category
the instruments are "dry". No reverberation, no other effects.<br>






<ul style="margin-left: 40px;">





  <li><a href="demos/noefx_bell_strings.ogg">Bells and Strings</a> <span style="font-style: italic;">(you must listen this one, too)</span></li>





  <li><a href="demos/noefx_organ_choir.ogg">Organ and Choir</a></li>





  <li><a href="demos/noefx_saw_piano.ogg">Saw Piano</a> <span style="font-style: italic;">(this example contains the same notes played many times, but with different bandwidth and <a href="#harmonic_profile">harmonic profiles</a>)</span></li>





  <li><a href="demos/noefx_soft_pad.ogg">Soft Pad</a></li>





</ul>





<big><small>&nbsp;&nbsp;&nbsp; <a href="demos/zynaddsubfx_parameters_padsynth.zip">Parameter files</a> of above examples (for ZynAddSubFX).</small><br>





<br>



<br>





</big>
<h4><big><a style="font-weight: bold;" name="Description"></a><big style="font-weight: bold;">3) Description of the algorithm</big></big><span style="font-weight: bold;">
&nbsp;&nbsp;&nbsp; </span></h4>





&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; In order to understand how this algorithm works, you
need to be familiar with how&nbsp;I think about the musical instruments. Please read <a href="http://zynaddsubfx.sourceforge.net/doc_0.html">an introduction</a> for the description of the meaning and the importance of&nbsp;<span style="font-style: italic;">Bandwidth of each harmonic</span> and&nbsp;<span style="font-style: italic;">Randomness</span>.<br>






&nbsp;<br>





&nbsp;&nbsp;&nbsp; <a name="General_description"></a><big><span style="font-weight: bold;">3.1) General description</span></big><br>






&nbsp;&nbsp; &nbsp;This algorithm generates some large wavetables that
can played at diferent speeds to get the desired sound. This algorithm
describes only how these wavetables are generated. The result is a
perfectly looped wavetable. Unlike other synthesis methods which use
Inverse Fast Fourier Transform, this one does <span style="font-weight: bold;">not use</span> overlap/add methods and there is only one IFFT for the whole sample.<br>






&nbsp;&nbsp; &nbsp;<br>






&nbsp;&nbsp; &nbsp;The basic steps are:<br>






<ol style="margin-left: 40px;">






  <li>Make a very large array that represents the amplitude spectrum of the sound (default all values are zero)</li>






  <li>Generates the distribution of each harmonic in frequency and add it to the array</li>






  <li>Put random phases to each frequency of the spectrum</li>






  <li>Do a single Inverse Fourier Transform of the whole spectrum. Here is no
need of any overlapping windows, because there is only one single IFFT
for the whole sample.</li>






</ol>





&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;The ouput is the sample which can
be used as a wavetable. In the next image, the steps are represented
graphically:<br>





<div style="text-align: left; margin-left: 40px;"><a href="images/padsynth_steps.png"><img style="border: 0px solid ; width: 320px; height: 209px;" alt="PADsynth steps" src="images/padsynth_steps_small.png"></a><br>





</div>





<br>











&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="font-weight: bold;">3.1.1) The bandwidth of each harmonic</span><br>






&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; I consider one harmonic(overtone)
as being composed of many frequencies. These sine components of one
harmonic are spread over a certain band of frequencies.<br>

&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Higher harmonics has bigger
bandwidth. In natural choirs/ensembles the bandwidth is proportional to
the harmonic's frequency.<br>

&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Here is an example of a spectrum of an instrument generated by ZynAddSubFX:<br>

&nbsp;&nbsp; &nbsp;&nbsp;<br>

<table style="text-align: left; width: 629px; height: 143px; margin-left: 40px;" border="1" cellpadding="2" cellspacing="2">

  <tbody>

    <tr>

      <td align="center" valign="middle"><a href="images/bw2.png"><img style="border: 0px solid ; width: 282px; height: 100px;" alt="bandwidth of each harmonic" src="images/bw2_small.png"></a></td>

      <td align="center" valign="middle"><a href="images/bw1.png"><img style="border: 0px solid ; width: 284px; height: 100px;" alt="bandwidth of each harmonic" src="images/bw1_small.png"></a></td>

    </tr>

    <tr>

      <td align="center" valign="middle">full spectrum</td>

      <td align="center" valign="middle">closeup of the spectrum</td>

    </tr>

  
  </tbody>
</table>

&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; The harmonics becomes wider and
wider, until at a certain frequency, where they may merge to a noise band
(as in the full spectrum image from above). This is a normal thing and I
recomand to <span style="font-weight: bold;"><u>not</u> avoid this</span> by limiting the bandwidth of the harmonics.<br>





<br>






&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="font-weight: bold;"><a name="harmonic_profile"></a>3.1.2) The frequency distribution of one harmonic/overtone (or the harmonic profile)</span><br>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; This describes the function of the spread of the harmonic.<br>

&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; Here are some examples of how they can be spread:<br>





<div style="margin-left: 40px;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;a) A special case is where there
is only a single sine component inside the hamonic. In this case, the
harmonic and the "sine component" are the same thing.<br>





</div>





<div style="margin-left: 80px;"><img style="width: 430px; height: 85px;" alt="Single frequency" src="images/profile1.png"></div>





<div style="margin-left: 40px;">
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Audio example: <a href="audio/profile1s.ogg">single harmonic</a>, <a href="audio/profile1c.ogg">many harmonics</a><br>





<br>






&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;b) Detuned. In this case there are two sine components which are detuned.<br>





</div>





<div style="margin-left: 80px;"><img style="width: 430px; height: 85px;" alt="Detuned" src="images/profile2.png"></div>





<div style="margin-left: 40px;">
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Audio example: <a href="audio/profile2s.ogg">single harmonic</a>, <a href="audio/profile2c.ogg">many harmonics</a><br>





<br>





&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;c) Evenly spread inside the harmonic (all components has the same amplitude)<br>





</div>





<div style="margin-left: 80px;"><img style="width: 425px; height: 85px;" alt="Flat profile" src="images/profile3.png"></div>





<div style="margin-left: 40px;">
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Audio example: <a href="audio/profile3s.ogg">single harmonic</a>, <a href="audio/profile3c.ogg">many harmonics</a><br>





<br>





&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;d) Normal (Gaussian)
distribution. The sine components amplitude are bell shaped. The
largest amplitude is in the center of the band. This distribution gives
the most natural sounds (it simulates a very, very large enssemble).<br>





&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <img style="width: 432px; height: 92px;" alt="Gaussian" src="images/profile4.png"><br>






&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Audio example: <a href="audio/profile4s.ogg">single harmonic</a>, <a href="audio/profile4c.ogg">many harmonics</a><br>





</div>





<br>






&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; Of course, you can use many
others harmonic's profiles. ZynAddSubFX's PADsynth module offers many
ways to generate the harmonic profile.<br>






&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; Also, it's very important that the
harmonic must have the same amplitude, regardless of the profile functions/parameters
and the bandwidth.<br>



<br>

&nbsp;&nbsp; &nbsp;<span style="font-weight: bold;">3.1.3) The phases of the sine components of the harmonics</span><br>






&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; This algorithm considers the phases of the sine components of each harmonics as random.<br>






<br>



<br>






<a name="pseudocode"></a>&nbsp; <big><span style="font-weight: bold;">3.2) Steps, input and output of the algorithm (with pseudocode)</span></big><br>






&nbsp;&nbsp; &nbsp;<span style="font-weight: bold;">3.2.1) Steps of the basic algorithm</span><br>






<big><span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;<span style="font-weight: bold; text-decoration: underline;">Input:</span></span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; <span style="font-weight: bold;">N</span> - wavetable size. It's recomanded to be a
power of 2. This is</span></big><big><span style="font-family: monospace;">, usually, </span></big><big><span style="font-family: monospace;"> a big number (like 262144)</span><br style="font-family: monospace; text-decoration: underline;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; <span style="font-weight: bold;">samplerate</span> - the samplerate (eg. 44100)</span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; <span style="font-weight: bold;">f</span> - frequency of the the fundamental note (eg. 440) </span><br style="font-family: monospace;">






<span style="font-family: monospace;"><span style="font-weight: bold;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; bw</span> - bandwidth of first harmonic in cents (eg. 50 cents); must be greater than zero</span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; <span style="font-weight: bold;">number_harmonics</span> - the number of harmonics. Of course, number_harmonics&lt;(samplerate/f)</span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; <span style="font-weight: bold;"><a name="A_arrays_amplitude"></a>A[1..number_harmonics]</span> - amplitude of the harmonics</span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;<span style="font-weight: bold; text-decoration: underline;">Output:</span></span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; <span style="font-weight: bold;">smp[0..N-1]</span> - the generated wavetable</span><br style="font-family: monospace;">






<br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;<span style="font-weight: bold; text-decoration: underline;">Internal variables:</span></span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; <span style="font-weight: bold;">freq_amp[0..N/2-1]</span> = {0,0,0,0,...,0}</span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; <span style="font-weight: bold;">freq_phase[0..N/2-1]</span>, etc...</span><span style="font-family: monospace;"> &nbsp;&nbsp; &nbsp;</span><br style="font-family: monospace;">






<span style="font-family: monospace;"></span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;<span style="font-weight: bold; text-decoration: underline;">Functions:</span></span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; <span style="font-weight: bold;">RND()</span> returns a random value between 0 and 1</span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; <span style="font-weight: bold;">IFFT()</span> is the inverse fourier transform</span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; <span style="font-weight: bold;">normalize_sample()</span> normalizes samples</span><br style="font-family: monospace;">






<br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; <span style="font-weight: bold;">profile(fi,bwi)</span>{</span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; x=fi/bwi;</span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; return exp(-x*x)/bwi;</span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; };</span><br style="font-family: monospace;">






<br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;<span style="font-weight: bold; text-decoration: underline;">Steps:</span></span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; FOR nh = 1 to number_harmonics &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;</span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;bw_Hz=(pow(2,bw/1200)-1.0)*f*nh;</span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;bwi=bw_Hz/(2.0*samplerate);</span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; fi=f*nh/samplerate;</span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; FOR i=0 to N/2-1</span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; hprofile=profile((i/N)-fi,bwi);</span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; freq_amp[i]=freq_amp[i]+hprofile*A[nh];</span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; ENDFOR</span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; ENDFOR</span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;</span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; FOR i=0 to N/2-1</span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; freq_phase[i]=RND()*2*PI;</span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; ENDFOR&nbsp;&nbsp; &nbsp;</span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;</span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; smp=IFFT(N,freq_amp,freq_phase);</span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; normalize_sample(N,smp);</span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;</span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; OUTPUT smp</span><br style="font-family: monospace;">






</big><br>






&nbsp;&nbsp; &nbsp;<span style="font-weight: bold;">3.2.2) The extended algorithm</span><br>






&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; The differences between the extended algorithm and the basic algorithm are minor:<br>






&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;There is an additional parameter:<br>






&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; <span style="font-style: italic;">bwscale</span>:
that specify how much the bandwidth of the harmonic increase according
to it's frequency. Also, there is defined a function called relF(N) who
returns the relative frequency of the N'th overtone. It allows to
generate detuned harmonics or even metallic sounds (like bells).<br>






&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;The difference between the basic algorithm is at the computation of <span style="font-style: italic;">bw_Hz</span> and <span style="font-style: italic;">fi</span>:<br>






<big><span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;bw_Hz=(pow(2.0,bw/1200.0)-1.0)*f*pow(relF(nh),bwscale);</span><br style="font-family: monospace;">






<span style="font-family: monospace;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; fi=f*relF(nh)/samplerate;</span><br>






</big>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;If the <span style="font-style: italic;">relF(N)</span> function returns N and the <span style="font-style: italic;">bwscale</span> is equal to 1, this algorithm will be equivalent to the basic algorithm.&nbsp;&nbsp; &nbsp;<br>



<br>






&nbsp;&nbsp; &nbsp;<span style="font-weight: bold;">3.2.3) Example Graph of <span style="font-style: italic;">freq_amp</span> array:</span><br>






&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; Graphs of the (basic algorithm) <span style="font-style: italic;">freq_amp</span> array for
N=262144, f=500 Hz, bw=100 cents, samplerate=44.1 Khz, and A[] where
A[n]=1.0/sqrt(n)<br>





<br>





<table style="width: 436px; height: 141px; text-align: left; margin-right: auto; margin-left: 40px;" border="1" cellpadding="2" cellspacing="1">





  <tbody>





    <tr>





      <td align="center" valign="middle"><a href="images/data_full.png"><img style="border: 0px solid ; width: 320px; height: 179px;" alt="data full" src="images/data_full_small.png"></a></td>





      <td align="center" valign="middle"><a href="images/data_closeup.png"><img style="border: 0px solid ; width: 320px; height: 180px;" alt="data closeup" src="images/data_closeup_small.png"></a></td>





    </tr>





    <tr>





      <td style="vertical-align: middle; text-align: center;">Graph of the full array</td>





      <td align="center" valign="middle">Closeup of the graph of the array</td>





    </tr>





  
  
  
  
  
  </tbody>
</table>





<br>





<br>






&nbsp;&nbsp; &nbsp;<span style="font-weight: bold;">3.2.4) Example of the output of this algorithm (<a href="#c_implementation">c_basic implementation</a>)</span><br>





&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <a href="audio/c_basic_sample.ogg">c_basic_sample.ogg</a> - this is the resulting <span style="font-style: italic;">smp</span> array converted to ogg vorbis.<br>






<br>



<br>






<a name="c_implementation"></a>&nbsp; <big><span style="font-weight: bold;">3.3) Public domain C/C++ code that shows a simple implementation</span></big><br>






&nbsp;&nbsp; &nbsp;I wrote some C/C++ implementations of the basic algorithm and the extended algorithm.<br>






&nbsp;&nbsp; &nbsp;The "c_basic" directory contains the basic
algorithm, "c_extended" contains the extended algorithm and the
"c_simple_choir" is the implementation of the basic algorithm to make a
simple choir.<br>




&nbsp;&nbsp; &nbsp;These implementations&nbsp; are wrote to be
easy to understood and they are not optimised for speed. You can test
on Linux by running the ./compile.sh scripts. It's recomanded to
have <a href="http://ccrma.stanford.edu/software/snd/">snd</a> installed, to make possible to hear the results as wav file.
Of course, you can import the results into your instruments, because
the waves are perfectly looped (set the first loop point to 0 and the
second to the end of the wav).<br>






&nbsp;&nbsp; &nbsp;I put the source code under public domain, but it
depends on <a href="http://www.fftw.org/">FFTW3</a> library, so, if you want to use into your products, you
must use your IFFT routines to avoid licensing issues of the FFTW library.<br>



<br>






&nbsp;&nbsp;&nbsp;<a name="cpp_implementation"></a> <big><span style="font-weight: bold;">3.4) Public domain C++ class that implements the algorithm (ready to use)</span></big><br>






&nbsp;&nbsp; &nbsp;To be easy to use this algorithm into your projects
or products, I made a ready-to-use C++ class. Only thing that you have
to do, is to provide it an IFFT routine. Please read the header file for details.<br>





<div style="text-align: center;"><a href="implementation/PADsynth_implementation.zip"><big>Download C/C++ code from here</big></a><br>





</div>






<br>



<br>






<a name="Tips"></a><big><big><span style="font-weight: bold;">4) Tips and suggestions</span></big></big><br>






<ul>






  <li>Keep in mind that the resulting wavetables are perfectly looped</li>






  <li>When using the wavetables into instruments, on each NoteOn, start from a random position and not
from the start. This avoids hearing the same sound on each keystroke</li>






  <li>You can use the same wavetable for generating stereo sounds, by playing
the same wavetable at different positions for left and right. The best
is to make the difference between left right as N/2</li>






  <li>Generate different wavetables for different pitches and use the one who is closest to the desired pitch</li>




  <li>Upsample or downsample the <a href="#A_arrays_amplitude">harmonics's amplitude array</a> before running the algorithm, according to the fundamental frequency. In this case we need to  set a parameter <span style="font-weight: bold; font-style: italic;">"base_frequency"<span style="font-style: italic;"><span style="font-weight: bold;"><span style="font-style: italic;"><span style="font-weight: bold;"></span></span></span></span></span> which represents the frequency where the array is left unchanged. <br>




Example: we have A_orig[]={1,2,1,3,0,0,1,0} and&nbsp; <span style="font-style: italic;">base_frequency</span> is equal to 440 Hz<br>




Here are some cases:<br>




    
    
    
    
    <ul>




      <li>A[] for 440 Hz: is the same as A_orig[]</li>




      <li>A[] for 220 Hz: is the A_orig[] upsampled by factor of 2<br>




so: A[]={1, <span style="font-weight: bold;">1</span>, 1.5, <span style="font-weight: bold;">2</span>, 1.5, <span style="font-weight: bold;">1</span>, 2, <span style="font-weight: bold;">3</span>, 1.5, <span style="font-weight: bold;">0</span>, 0,<span style="font-weight: bold;"> 0</span>, 0.5, <span style="font-weight: bold;">1</span>, 0.5, <span style="font-weight: bold;">0</span>}<br>




(the original A_orig amplitudes are shown as bold)</li>




      <li>A[] for 880 Hz: the A_orig[] is downsampled by a factor of 2<br>




so: A[]={1.5, 2, 0, 0.5}</li>




      <li>A[] for <span style="font-style: italic;">F</span> Hz: the A_orig[] is scaled by a factor of <span style="font-style: italic;">440/F</span>.&nbsp;</li>




    
    
    
    
    </ul>




Even if this ideea is very simple, the resulting sounds are very
natural, because it keeps the spectrum constant according to the
harmonic's frequency and not to harmonic's number. This folows the
point 4 from the <a href="http://zynaddsubfx.sourceforge.net/doc_0.html">document</a> where I described some principles regarding synthesis.<br>




  </li>






</ul>






&nbsp; &nbsp;<br>






<a name="Conclusion"></a><big><big><span style="font-weight: bold;">5) Conclusions</span></big></big><br>






&nbsp;&nbsp;&nbsp; I hope that this algorithm will be implemented in
many software/hardware synthesizers. Use it, <span style="font-weight: bold;">spread it</span>, write about it,&nbsp; make beautiful instruments with it. If your synthesizer uses plenty of
samples, you can use this algorithm to generate many ready-to-use
samples.<br>






&nbsp;&nbsp; &nbsp;<br>





&nbsp;<br>





<div style="text-align: center;">This algorithm, this page, the images,
the implementations from this page, the audio examples, the parameter
files from this page<br>





are released under <span style="font-weight: bold;">Public Domain</span> by <span style="font-weight: bold;">Nasca Octavian </span><span style="text-decoration: underline; font-weight: bold;">Paul</span>.<br>





&nbsp; e-mail: <span style="font-style: italic;">zynaddsubfx AT yahoo DOT com &nbsp; <br>





<br>







</div>






</body>
</html>
